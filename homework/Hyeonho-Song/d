{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##Exercise 2.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "\n"
     ]
    }
   ],
   "source": [
    "x = 5\n",
    "print(x+1)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##Exercise 2.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.5\n",
      "8.5\n",
      "4.0\n",
      "11\n",
      ".....\n",
      "\n"
     ]
    }
   ],
   "source": [
    "width = 17\n",
    "height = 12.0\n",
    "delimiter = '.'\n",
    "print(width/2)\n",
    "print(width/2.0)\n",
    "print(height/3)\n",
    "print(1+2*5)\n",
    "print(delimiter*5)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##Exercise 2.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "부피와 표면적을 구하려는 구의 반지름 입력...5\n",
      "반지름 5.0  인 구의부피는  523.3333333333334\n",
      "\n",
      "Exercise 2.3.2\n",
      "\n",
      "전체 주문할 copy수를 입력...60\n",
      "28.349999999999998\n",
      "\n",
      "Exercise 2.3.3\n",
      "문제 해석을 못하겠어요\n",
      "\n"
     ]
    }
   ],
   "source": [
    "r=float(input(\"부피와 표면적을 구하려는 구의 반지름 입력...\"))\n",
    "Voulme = 4/3*(3.14)*r**3\n",
    "print(\"반지름\",r,\" 인 구의부피는 \",Voulme)\n",
    "print()\n",
    "print('Exercise 2.3.2')\n",
    "bp = 24.95\n",
    "dis= 0.4\n",
    "print()\n",
    "copy=int(input('전체 주문할 copy수를 입력...'))\n",
    "sc = 3 + 0.75*(copy-1)\n",
    "print(sc*(1-dis))\n",
    "print()\n",
    "print('Exercise 2.3.3')\n",
    "print('문제 해석을 못하겠어요')\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##Exercise 3.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "문자를 입력하시오..aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n",
      "다른 문자를 입력하시오..8\n",
      "8\n",
      "\n"
     ]
    }
   ],
   "source": [
    " a=input(\"문자를 입력하시오..\")\n",
    "def right_justify(a):\n",
    "        while (len(a)>70) :\n",
    "            a=input(\"다른 문자를 입력하시오..\")\n",
    "        else :\n",
    "            print(a)\n",
    "right_justify(a)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##Exercise 3.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "문자를 입력하시오홍정민 \n",
      "do_twice(print_홍정민 ) :\n",
      "홍정민 \n",
      "홍정민 \n",
      "do_four(print_홍정민 ) :\n",
      "홍정민 \n",
      "홍정민 \n",
      "홍정민 \n",
      "홍정민 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "spam = input(\"문자를 입력하시오\")\n",
    "def do_twice(f):\n",
    "        f()\n",
    "        f()\n",
    "def print_spam():\n",
    "        print(spam)\n",
    "print('do_twice(print_'+spam+') :')\n",
    "do_twice(print_spam)\n",
    "def do_four(g):\n",
    "        do_twice(g)\n",
    "        do_twice(g)\n",
    "print('do_four(print_'+spam+') :')\n",
    "do_four(print_spam)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##Exercise 3.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+ - - - - + - - - - +\n",
      "I         I         I\n",
      "I         I         I\n",
      "I         I         I\n",
      "I         I         I\n",
      "+ - - - - + - - - - +\n",
      "I         I         I\n",
      "I         I         I\n",
      "I         I         I\n",
      "I         I         I\n",
      "+ - - - - + - - - - +\n"
     ]
    }
   ],
   "source": [
    "def do_twice(f):\n",
    "\n",
    "    f()\n",
    "\n",
    "    f()\n",
    "\n",
    "\n",
    "def do_four(g):\n",
    "\n",
    "    do_twice(g)\n",
    "\n",
    "    do_twice(g)\n",
    "\n",
    "def print_width():\n",
    "\n",
    "    print(\"+ - - - - + - - - - +\")\n",
    "\n",
    "def print_coulmn():\n",
    "\n",
    "    print(\"I         I         I\")\n",
    "\n",
    "print_width()\n",
    "\n",
    "do_four(print_coulmn)\n",
    "\n",
    "print_width()\n",
    "\n",
    "do_four(print_coulmn)\n",
    "\n",
    "print_width()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  },
  "widgets": {
   "state": {},
   "version": "1.1.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
